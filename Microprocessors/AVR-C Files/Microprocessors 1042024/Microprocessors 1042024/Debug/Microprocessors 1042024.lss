
Microprocessors 1042024.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070a  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ca  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	//Data direction just for Port D, Pin 3, and just for Port B, Pin 3
    DDRD |= 1<<4;
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 61       	ori	r24, 0x10	; 16
  84:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 1<<3;
  86:	84 b1       	in	r24, 0x04	; 4
  88:	88 60       	ori	r24, 0x08	; 8
  8a:	84 b9       	out	0x04, r24	; 4
	//variable for age. value is typically within 0-255, so used unsigned char
	unsigned char x = 17;
  8c:	91 e1       	ldi	r25, 0x11	; 17
    while (1) 
    {		
		
			//if x is greater than 18, set port D pin 4 (Green LED) HIGH, and set port B pin 3 LOW to turn off red LED in case it was on
			if(x>=18) {
  8e:	92 31       	cpi	r25, 0x12	; 18
  90:	38 f0       	brcs	.+14     	; 0xa0 <main+0x20>
				PORTD |= 1<<4;
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	80 61       	ori	r24, 0x10	; 16
  96:	8b b9       	out	0x0b, r24	; 11
				PORTB &= ~(1<<3);
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	87 7f       	andi	r24, 0xF7	; 247
  9c:	85 b9       	out	0x05, r24	; 5
  9e:	06 c0       	rjmp	.+12     	; 0xac <main+0x2c>
			}
			
			//else, set port B pin 3 HIGH (Red), and port D pin 4 LOW to turn off green LED in case it was on
			else {
				PORTB |= 1<<3;
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	85 b9       	out	0x05, r24	; 5
				PORTD &= ~(1<<4);
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	8f 7e       	andi	r24, 0xEF	; 239
  aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	3f e4       	ldi	r19, 0x4F	; 79
  b0:	83 ec       	ldi	r24, 0xC3	; 195
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
			}
			
			//not apart of assignment, was for video. this increments x after a 4 second delay, so x goes from 17 to 18, so the video shows both LEDs and logic working.
			_delay_ms(4000);
			x++;
  be:	9f 5f       	subi	r25, 0xFF	; 255
	}
  c0:	e6 cf       	rjmp	.-52     	; 0x8e <main+0xe>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
