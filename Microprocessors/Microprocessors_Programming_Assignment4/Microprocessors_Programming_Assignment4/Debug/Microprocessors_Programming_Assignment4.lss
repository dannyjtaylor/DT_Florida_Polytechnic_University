
Microprocessors_Programming_Assignment4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006be  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000278  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c1  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001655  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>

int main(void)
{
	//data direction, port B all input, port C all output, port D1 is output, then for activity 2, ports D2/D3 are input, port D4 is output
	DDRB = 0x00;
  80:	14 b8       	out	0x04, r1	; 4
	DDRC = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<4 | 1<<1);
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	82 61       	ori	r24, 0x12	; 18
  8a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<3 | 1<<2));
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	83 7f       	andi	r24, 0xF3	; 243
  90:	8a b9       	out	0x0a, r24	; 10
	
	//timer 0 setup, CTC mode w/ 8 prescalar
	TCCR0A = 0x02;
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x02;
  96:	85 bd       	out	0x25, r24	; 37
	//set TCNT1 appropriately
	//set output compare
	OCR0A = 200-1;
  98:	97 ec       	ldi	r25, 0xC7	; 199
  9a:	97 bd       	out	0x27, r25	; 39
	
	//interrupt masks
	EIMSK = 1<<INT0 | 1<<INT1;
  9c:	93 e0       	ldi	r25, 0x03	; 3
  9e:	9d bb       	out	0x1d, r25	; 29
	TIMSK0 = 1<<OCIE0A;
  a0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	//external interrupt setup (INT 0 is low to high, INT1 is high to low, EICRA = 0000 1110
	EICRA = 0x0E;
  a4:	8e e0       	ldi	r24, 0x0E	; 14
  a6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	
	//enable global interrupt
	sei();
  aa:	78 94       	sei
	
	//for activity 2, turn LED off initially
	PORTD &= ~(1<<4);
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	8b b9       	out	0x0b, r24	; 11
	//wait here, send data
	while (1) {
		PORTC = PINB;
  b2:	83 b1       	in	r24, 0x03	; 3
  b4:	88 b9       	out	0x08, r24	; 8
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <main+0x32>

000000b8 <__vector_14>:
	}
	return 0;
}

ISR(TIMER0_COMPA_vect) {
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	//reset counter for the square wave
	//TCNT1 = 63936;
	//upon interrupt starting, toggle pin 1 on PORTD per rawa's instructions
	PORTD ^= 1<<1;
  c6:	9b b1       	in	r25, 0x0b	; 11
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	89 27       	eor	r24, r25
  cc:	8b b9       	out	0x0b, r24	; 11
	//don’t need to change TOV flag or reset clock w/ TCCR1B as the interrupt does it for you
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <__vector_1>:
ISR(INT0_vect) {
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
	//int0, low to high pulse, turn LED on
	PORTD |= (1<<4);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	8b b9       	out	0x0b, r24	; 11
}
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_2>:

ISR(INT1_vect) {
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
	//int 1, high to low pulse, turn LED off
	PORTD  &= ~(1<<4);
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	8b b9       	out	0x0b, r24	; 11
}
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
