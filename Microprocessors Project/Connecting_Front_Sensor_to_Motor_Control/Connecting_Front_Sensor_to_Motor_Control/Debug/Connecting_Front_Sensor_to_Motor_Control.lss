
Connecting_Front_Sensor_to_Motor_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b6  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006be  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fb  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000eb  00000000  00000000  0000181b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001906  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <getDistance>:
	//duration variable
	int duration = 0;
	//FRONT, TRIGGER = D0, ECHO = C0
	
	//send 10 microsecond pulse to front sensor trigger
	PORTD |= (1 << 4);
  80:	8b b1       	in	r24, 0x0b	; 11
  82:	80 61       	ori	r24, 0x10	; 16
  84:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	25 e3       	ldi	r18, 0x35	; 53
  88:	2a 95       	dec	r18
  8a:	f1 f7       	brne	.-4      	; 0x88 <getDistance+0x8>
  8c:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1 << 4);
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	8f 7e       	andi	r24, 0xEF	; 239
  92:	8b b9       	out	0x0b, r24	; 11
		
	//wait for echo pin to receive the pulse
	while (!(PIND & (1 << 7)));
  94:	4f 9b       	sbis	0x09, 7	; 9
  96:	fe cf       	rjmp	.-4      	; 0x94 <getDistance+0x14>
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	05 c0       	rjmp	.+10     	; 0xa8 <getDistance+0x28>

	while (PIND & (1 << 7)) {
		duration++;
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	25 e0       	ldi	r18, 0x05	; 5
  a2:	2a 95       	dec	r18
  a4:	f1 f7       	brne	.-4      	; 0xa2 <getDistance+0x22>
  a6:	00 00       	nop
	PORTD &= ~(1 << 4);
		
	//wait for echo pin to receive the pulse
	while (!(PIND & (1 << 7)));

	while (PIND & (1 << 7)) {
  a8:	4f 99       	sbic	0x09, 7	; 9
  aa:	f9 cf       	rjmp	.-14     	; 0x9e <getDistance+0x1e>
		duration++;
		_delay_us(1);
		}

	//calculate distance in cm: duration / 58 (for 1µs per round trip count at 340m/s (speed of sound) )
	return duration / 58;
  ac:	6a e3       	ldi	r22, 0x3A	; 58
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	0e 94 9a 00 	call	0x134	; 0x134 <__divmodhi4>
  b4:	cb 01       	movw	r24, r22
	}
  b6:	08 95       	ret

000000b8 <main>:
int main(void) {
	//initialization
	int front_distance = 0;
	
	//configure front sensor detection LED to port C pin 2
	DDRC |= 1<<2;
  b8:	87 b1       	in	r24, 0x07	; 7
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	87 b9       	out	0x07, r24	; 7
	
	//front ultrasonic sensor initialization
	//trigger pin: PORTD PIN0
	//echo pin: PORTD PIN1
	DDRD |= (1 << 4); //set trigger pin as output
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 7); //set echo pin as input
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	8a b9       	out	0x0a, r24	; 10

	DDRD |= (1<<3);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<6);
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<2);
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<3);
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	84 b9       	out	0x04, r24	; 4

	while (1) {
		//at each instance of while loop, find the current distance to any object from the 3 sensors
		front_distance = getDistance();
  e2:	0e 94 40 00 	call	0x80	; 0x80 <getDistance>
		
		// if statement to check if the front distance is 15 centimeters away or less
		if (front_distance > 0 && front_distance <= 3) {
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	03 97       	sbiw	r24, 0x03	; 3
  ea:	80 f4       	brcc	.+32     	; 0x10c <main+0x54>
			//then stop car
			//OCR2B = 0;
			//OCR2B = (uint8_t)DUTY_CYCLE * 255;
			//and turn on detection LED accordingly
			PORTD &= ~(1<<3);
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	87 7f       	andi	r24, 0xF7	; 247
  f0:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<6);
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	8f 7b       	andi	r24, 0xBF	; 191
  f6:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1<<2);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<3);
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	87 7f       	andi	r24, 0xF7	; 247
 102:	85 b9       	out	0x05, r24	; 5
			PORTC |= 1<<2;
 104:	88 b1       	in	r24, 0x08	; 8
 106:	84 60       	ori	r24, 0x04	; 4
 108:	88 b9       	out	0x08, r24	; 8
 10a:	0f c0       	rjmp	.+30     	; 0x12a <main+0x72>
		}
		
		else {
			//else, start car, turn off any LED detection
			//OCR2B = (uint8_t)DUTY_CYCLE * 255;
			PORTD |= (1<<3);
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1<<6);
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	80 64       	ori	r24, 0x40	; 64
 116:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (1<<2);
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1<<3);
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	88 60       	ori	r24, 0x08	; 8
 122:	85 b9       	out	0x05, r24	; 5
			
			PORTC &= ~(1<<2);
 124:	88 b1       	in	r24, 0x08	; 8
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	88 b9       	out	0x08, r24	; 8
 12a:	85 e3       	ldi	r24, 0x35	; 53
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x74>
 130:	00 00       	nop
 132:	d7 cf       	rjmp	.-82     	; 0xe2 <main+0x2a>

00000134 <__divmodhi4>:
 134:	97 fb       	bst	r25, 7
 136:	07 2e       	mov	r0, r23
 138:	16 f4       	brtc	.+4      	; 0x13e <__divmodhi4+0xa>
 13a:	00 94       	com	r0
 13c:	07 d0       	rcall	.+14     	; 0x14c <__divmodhi4_neg1>
 13e:	77 fd       	sbrc	r23, 7
 140:	09 d0       	rcall	.+18     	; 0x154 <__divmodhi4_neg2>
 142:	0e 94 ae 00 	call	0x15c	; 0x15c <__udivmodhi4>
 146:	07 fc       	sbrc	r0, 7
 148:	05 d0       	rcall	.+10     	; 0x154 <__divmodhi4_neg2>
 14a:	3e f4       	brtc	.+14     	; 0x15a <__divmodhi4_exit>

0000014c <__divmodhi4_neg1>:
 14c:	90 95       	com	r25
 14e:	81 95       	neg	r24
 150:	9f 4f       	sbci	r25, 0xFF	; 255
 152:	08 95       	ret

00000154 <__divmodhi4_neg2>:
 154:	70 95       	com	r23
 156:	61 95       	neg	r22
 158:	7f 4f       	sbci	r23, 0xFF	; 255

0000015a <__divmodhi4_exit>:
 15a:	08 95       	ret

0000015c <__udivmodhi4>:
 15c:	aa 1b       	sub	r26, r26
 15e:	bb 1b       	sub	r27, r27
 160:	51 e1       	ldi	r21, 0x11	; 17
 162:	07 c0       	rjmp	.+14     	; 0x172 <__udivmodhi4_ep>

00000164 <__udivmodhi4_loop>:
 164:	aa 1f       	adc	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	a6 17       	cp	r26, r22
 16a:	b7 07       	cpc	r27, r23
 16c:	10 f0       	brcs	.+4      	; 0x172 <__udivmodhi4_ep>
 16e:	a6 1b       	sub	r26, r22
 170:	b7 0b       	sbc	r27, r23

00000172 <__udivmodhi4_ep>:
 172:	88 1f       	adc	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	5a 95       	dec	r21
 178:	a9 f7       	brne	.-22     	; 0x164 <__udivmodhi4_loop>
 17a:	80 95       	com	r24
 17c:	90 95       	com	r25
 17e:	bc 01       	movw	r22, r24
 180:	cd 01       	movw	r24, r26
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
