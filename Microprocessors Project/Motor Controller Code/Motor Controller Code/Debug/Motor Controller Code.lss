
Motor Controller Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a9  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d4  00000000  00000000  00000d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047c  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046c  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d1  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002051  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  78:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <getDistanceLeft>:
int getDistanceLeft() {
	//duration variable
	int duration = 0;
	
	//send a 10탎 high pulse to the left ultrasonic trigger pin
	PORTC |= (1 << 3);
  80:	88 b1       	in	r24, 0x08	; 8
  82:	88 60       	ori	r24, 0x08	; 8
  84:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	25 e3       	ldi	r18, 0x35	; 53
  88:	2a 95       	dec	r18
  8a:	f1 f7       	brne	.-4      	; 0x88 <getDistanceLeft+0x8>
  8c:	00 00       	nop
	_delay_us(10);
	PORTC &= ~(1 << 3);
  8e:	88 b1       	in	r24, 0x08	; 8
  90:	87 7f       	andi	r24, 0xF7	; 247
  92:	88 b9       	out	0x08, r24	; 8

	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 2)));
  94:	32 9b       	sbis	0x06, 2	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <getDistanceLeft+0x14>
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	05 c0       	rjmp	.+10     	; 0xa8 <getDistanceLeft+0x28>

	//measure how long echo pin stays HIGH
	while (PINC & (1 << 2)) {
		duration++;
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	25 e0       	ldi	r18, 0x05	; 5
  a2:	2a 95       	dec	r18
  a4:	f1 f7       	brne	.-4      	; 0xa2 <getDistanceLeft+0x22>
  a6:	00 00       	nop

	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 2)));

	//measure how long echo pin stays HIGH
	while (PINC & (1 << 2)) {
  a8:	32 99       	sbic	0x06, 2	; 6
  aa:	f9 cf       	rjmp	.-14     	; 0x9e <getDistanceLeft+0x1e>
		duration++;
		_delay_us(1);
	}

	//calculate distance in cm: duration / 58 (for 1탎 per round trip count at 340m/s (speed of sound) )
	return duration / 58;
  ac:	6a e3       	ldi	r22, 0x3A	; 58
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__divmodhi4>
  b4:	cb 01       	movw	r24, r22
}
  b6:	08 95       	ret

000000b8 <getDistanceRight>:
int getDistanceRight() {
	//duration variable
	int duration = 0;
	
	//send a 10탎 high pulse to the right ultrasonic trigger pin
	PORTC |= (1 << 0);
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	88 b9       	out	0x08, r24	; 8
  be:	25 e3       	ldi	r18, 0x35	; 53
  c0:	2a 95       	dec	r18
  c2:	f1 f7       	brne	.-4      	; 0xc0 <getDistanceRight+0x8>
  c4:	00 00       	nop
	_delay_us(10);
	PORTC &= ~(1 << 0);
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	88 b9       	out	0x08, r24	; 8

	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 1)));
  cc:	31 9b       	sbis	0x06, 1	; 6
  ce:	fe cf       	rjmp	.-4      	; 0xcc <getDistanceRight+0x14>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <getDistanceRight+0x28>

	//measure how long echo pin stays HIGH
	while (PINC & (1 << 1)) {
		duration++;
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	25 e0       	ldi	r18, 0x05	; 5
  da:	2a 95       	dec	r18
  dc:	f1 f7       	brne	.-4      	; 0xda <getDistanceRight+0x22>
  de:	00 00       	nop

	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 1)));

	//measure how long echo pin stays HIGH
	while (PINC & (1 << 1)) {
  e0:	31 99       	sbic	0x06, 1	; 6
  e2:	f9 cf       	rjmp	.-14     	; 0xd6 <getDistanceRight+0x1e>
		duration++;
		_delay_us(1);
	}

	//calculate distance in cm: duration / 58 (for 1탎 per round trip count at 340m/s (speed of sound) )
	return duration / 58;
  e4:	6a e3       	ldi	r22, 0x3A	; 58
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__divmodhi4>
  ec:	cb 01       	movw	r24, r22
}
  ee:	08 95       	ret

000000f0 <getDistanceFront>:
int getDistanceFront() {
	//duration variable
	int duration = 0;
	
	//send a 10 탎 high pulse to the front ultrasonic trigger pin
	PORTC |= (1 << 4);
  f0:	88 b1       	in	r24, 0x08	; 8
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	25 e3       	ldi	r18, 0x35	; 53
  f8:	2a 95       	dec	r18
  fa:	f1 f7       	brne	.-4      	; 0xf8 <getDistanceFront+0x8>
  fc:	00 00       	nop
	_delay_us(10);
	PORTC &= ~(1 << 4);
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	88 b9       	out	0x08, r24	; 8

	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 5)));
 104:	35 9b       	sbis	0x06, 5	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <getDistanceFront+0x14>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	05 c0       	rjmp	.+10     	; 0x118 <getDistanceFront+0x28>

	//measure how long echo pin stays HIGH
	while (PINC & (1 << 5)) {
		duration++;
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	25 e0       	ldi	r18, 0x05	; 5
 112:	2a 95       	dec	r18
 114:	f1 f7       	brne	.-4      	; 0x112 <getDistanceFront+0x22>
 116:	00 00       	nop

	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 5)));

	//measure how long echo pin stays HIGH
	while (PINC & (1 << 5)) {
 118:	35 99       	sbic	0x06, 5	; 6
 11a:	f9 cf       	rjmp	.-14     	; 0x10e <getDistanceFront+0x1e>
		duration++;
		_delay_us(1);
	}

	//calculate distance in cm: duration / 58 (for 1탎 per round trip count at 340m/s (speed of sound) )
	return duration / 58;
 11c:	6a e3       	ldi	r22, 0x3A	; 58
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__divmodhi4>
 124:	cb 01       	movw	r24, r22
}
 126:	08 95       	ret

00000128 <leftUltrasonicInit>:


void leftUltrasonicInit() {
	//trigger pin: PORTC PIN0
	//echo pin: PORTC PIN1
	DDRC |= (1 << 3); //set trigger pin as output
 128:	87 b1       	in	r24, 0x07	; 7
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << 2); //set echo pin as input
 12e:	87 b1       	in	r24, 0x07	; 7
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	87 b9       	out	0x07, r24	; 7
 134:	08 95       	ret

00000136 <rightUltrasonicInit>:


void rightUltrasonicInit() {
	//trigger pin: PORTC PIN2
	//echo pin: PORTC PIN3
	DDRC |= (1 << 0); //set trigger pin as output
 136:	87 b1       	in	r24, 0x07	; 7
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << 1); //set echo pin as input
 13c:	87 b1       	in	r24, 0x07	; 7
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	87 b9       	out	0x07, r24	; 7
 142:	08 95       	ret

00000144 <frontUltrasonicInit>:


void frontUltrasonicInit() {
	//trigger pin: PORTC PIN4
	//echo pin: PORTC PIN5
	DDRC |= (1 << 4); //set trigger pin as output
 144:	87 b1       	in	r24, 0x07	; 7
 146:	80 61       	ori	r24, 0x10	; 16
 148:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << 5); //set echo pin as input
 14a:	87 b1       	in	r24, 0x07	; 7
 14c:	8f 7d       	andi	r24, 0xDF	; 223
 14e:	87 b9       	out	0x07, r24	; 7
 150:	08 95       	ret

00000152 <motorPWMInit>:
	//LEFT WHEELS (TIMER 0)
	//TCCR0A = 0x83; //sets timer 0 in fast PWM with non-inverting
	//TCCR0B = 0x01; //sets timer 0 in clk NO PRESCALER
	
	// Configure Timer 0 for Fast PWM mode with non-inverting output on OC0A
	TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);
 152:	93 e8       	ldi	r25, 0x83	; 131
 154:	94 bd       	out	0x24, r25	; 36

	// Set clock prescaler to 256
	TCCR0B = (1 << CS02); // CS02:1, CS01:0, CS00:0 -> Prescaler = 256
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	85 bd       	out	0x25, r24	; 37
	
	//FRONT LEFT
	//set PORT D pin 6 for OC0A
	DDRD |= 1<<6;
 15a:	8a b1       	in	r24, 0x0a	; 10
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8a b9       	out	0x0a, r24	; 10
	OCR0A = 0;
 160:	17 bc       	out	0x27, r1	; 39
	
	//REAR LEFT
	//set PORT D pin 5 for OC0B
	DDRD |= 1<<5;
 162:	8a b1       	in	r24, 0x0a	; 10
 164:	80 62       	ori	r24, 0x20	; 32
 166:	8a b9       	out	0x0a, r24	; 10
	OCR0B = 0;
 168:	18 bc       	out	0x28, r1	; 40

	//RIGHT WHEELS (TIMER 2)
	//TCCR2A = 0x83; //sets timer 2 in fast PWM with non-inverting
	//TCCR2B = 0x01; //sets timer 2 in clk NO PRESCALER
	// Configure Timer 0 for Fast PWM mode with non-inverting output on OC0A
	TCCR2A = (1 << COM2A1) | (1 << WGM21) | (1 << WGM20);
 16a:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>

	// Set clock prescaler to 256
	TCCR2B = (1 << CS22) | (1 << CS21); // CS02:1, CS01:0, CS00:0 -> Prescaler = 256
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	
	//FRONT RIGHT
	//set PORTB pin 3 for OC2A
	DDRB |= 1<<3;
 174:	84 b1       	in	r24, 0x04	; 4
 176:	88 60       	ori	r24, 0x08	; 8
 178:	84 b9       	out	0x04, r24	; 4
	OCR2A = 0;
 17a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	//REAR RIGHT
	//set PORT D pin 3 for OC2B
	DDRD |= 1<<3;
 17e:	8a b1       	in	r24, 0x0a	; 10
 180:	88 60       	ori	r24, 0x08	; 8
 182:	8a b9       	out	0x0a, r24	; 10
	OCR2B = 0;
 184:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 188:	08 95       	ret

0000018a <main>:
	
	int left_distance = 0; 
	int right_distance = 0;
	int front_distance = 0;
	
	leftUltrasonicInit();
 18a:	0e 94 94 00 	call	0x128	; 0x128 <leftUltrasonicInit>
	rightUltrasonicInit();
 18e:	0e 94 9b 00 	call	0x136	; 0x136 <rightUltrasonicInit>
	frontUltrasonicInit();
 192:	0e 94 a2 00 	call	0x144	; 0x144 <frontUltrasonicInit>
	motorPWMInit();
 196:	0e 94 a9 00 	call	0x152	; 0x152 <motorPWMInit>
	//OCR2A = 128; //50% duty of FRONT RIGHT WHEEL
	//OCR2B = 128; //50% duty of REAR RIGHT WHEEL
	
	while (1) {
		//at each instance of while loop, find the current distance to any object from the 3 sensors
		left_distance = getDistanceLeft();
 19a:	0e 94 40 00 	call	0x80	; 0x80 <getDistanceLeft>
 19e:	ec 01       	movw	r28, r24
		right_distance = getDistanceRight();
 1a0:	0e 94 5c 00 	call	0xb8	; 0xb8 <getDistanceRight>
 1a4:	8c 01       	movw	r16, r24
		front_distance = getDistanceFront();
 1a6:	0e 94 78 00 	call	0xf0	; 0xf0 <getDistanceFront>
		
		// else if statement to check if the front distance is 5 centimeters away or less
		if (front_distance > 0 && front_distance <= 15) {
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	0f 97       	sbiw	r24, 0x0f	; 15
 1ae:	20 f4       	brcc	.+8      	; 0x1b8 <main+0x2e>
			//then go slower on both wheels by decreasing front left and right wheels by 10 clock cycles
			//OCR0A -= 10;
			//OCR2A -= 10;
			PORTB |= 1<<0;
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	1c c0       	rjmp	.+56     	; 0x1f0 <main+0x66>
		}
			
		//else if statement to check if the left distance is 5 centimeters away or less
		else if (left_distance > 0 && left_distance <= 15) {
 1b8:	21 97       	sbiw	r28, 0x01	; 1
 1ba:	2f 97       	sbiw	r28, 0x0f	; 15
 1bc:	20 f4       	brcc	.+8      	; 0x1c6 <main+0x3c>
			//then go slower on the right side, by decreasing the front right wheel by 10 clock cycles
			//OCR2A -= 10; 
			//PORTC |= 1<<6;
			PORTD |= 1<<0;
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	15 c0       	rjmp	.+42     	; 0x1f0 <main+0x66>
		}
		
		//else if statement to check if the right distance is 5 centimeters away or less
		else if (right_distance > 0 && right_distance <= 15) {
 1c6:	01 50       	subi	r16, 0x01	; 1
 1c8:	11 09       	sbc	r17, r1
 1ca:	0f 30       	cpi	r16, 0x0F	; 15
 1cc:	11 05       	cpc	r17, r1
 1ce:	20 f4       	brcc	.+8      	; 0x1d8 <main+0x4e>
			//then go slower on the left side, by decreasing the front left wheel by 10 clock cycles
			//OCR0A -= 10; 
			PORTC |= 1<<7;
 1d0:	88 b1       	in	r24, 0x08	; 8
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	88 b9       	out	0x08, r24	; 8
 1d6:	0c c0       	rjmp	.+24     	; 0x1f0 <main+0x66>
		
		else {
			//else, resume wheels to 50% duty. assume normal road conditions
			//OCR0A = 128;
			//OCR2A = 128;
			PORTD &= ~(1<<0);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8e 7f       	andi	r24, 0xFE	; 254
 1dc:	8b b9       	out	0x0b, r24	; 11
			PORTC &= ~(1<<6);
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	8f 7b       	andi	r24, 0xBF	; 191
 1e2:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<7);
 1e4:	88 b1       	in	r24, 0x08	; 8
 1e6:	8f 77       	andi	r24, 0x7F	; 127
 1e8:	88 b9       	out	0x08, r24	; 8
			PORTB &= ~(1<<0);
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	8e 7f       	andi	r24, 0xFE	; 254
 1ee:	85 b9       	out	0x05, r24	; 5
 1f0:	85 e3       	ldi	r24, 0x35	; 53
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0x68>
 1f6:	00 00       	nop
 1f8:	d0 cf       	rjmp	.-96     	; 0x19a <main+0x10>

000001fa <__divmodhi4>:
 1fa:	97 fb       	bst	r25, 7
 1fc:	07 2e       	mov	r0, r23
 1fe:	16 f4       	brtc	.+4      	; 0x204 <__divmodhi4+0xa>
 200:	00 94       	com	r0
 202:	07 d0       	rcall	.+14     	; 0x212 <__divmodhi4_neg1>
 204:	77 fd       	sbrc	r23, 7
 206:	09 d0       	rcall	.+18     	; 0x21a <__divmodhi4_neg2>
 208:	0e 94 11 01 	call	0x222	; 0x222 <__udivmodhi4>
 20c:	07 fc       	sbrc	r0, 7
 20e:	05 d0       	rcall	.+10     	; 0x21a <__divmodhi4_neg2>
 210:	3e f4       	brtc	.+14     	; 0x220 <__divmodhi4_exit>

00000212 <__divmodhi4_neg1>:
 212:	90 95       	com	r25
 214:	81 95       	neg	r24
 216:	9f 4f       	sbci	r25, 0xFF	; 255
 218:	08 95       	ret

0000021a <__divmodhi4_neg2>:
 21a:	70 95       	com	r23
 21c:	61 95       	neg	r22
 21e:	7f 4f       	sbci	r23, 0xFF	; 255

00000220 <__divmodhi4_exit>:
 220:	08 95       	ret

00000222 <__udivmodhi4>:
 222:	aa 1b       	sub	r26, r26
 224:	bb 1b       	sub	r27, r27
 226:	51 e1       	ldi	r21, 0x11	; 17
 228:	07 c0       	rjmp	.+14     	; 0x238 <__udivmodhi4_ep>

0000022a <__udivmodhi4_loop>:
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	a6 17       	cp	r26, r22
 230:	b7 07       	cpc	r27, r23
 232:	10 f0       	brcs	.+4      	; 0x238 <__udivmodhi4_ep>
 234:	a6 1b       	sub	r26, r22
 236:	b7 0b       	sbc	r27, r23

00000238 <__udivmodhi4_ep>:
 238:	88 1f       	adc	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	5a 95       	dec	r21
 23e:	a9 f7       	brne	.-22     	; 0x22a <__udivmodhi4_loop>
 240:	80 95       	com	r24
 242:	90 95       	com	r25
 244:	bc 01       	movw	r22, r24
 246:	cd 01       	movw	r24, r26
 248:	08 95       	ret

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
