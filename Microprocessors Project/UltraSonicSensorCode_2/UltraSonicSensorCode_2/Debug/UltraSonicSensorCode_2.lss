
UltraSonicSensorCode_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077e  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a3  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  0000104d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e9  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000eb  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <getDistance>:
int getDistance() {
	//duration variable to return it, unsigned 16 bit integer
	int duration = 0;

	//send a 10µs high pulse to the trigger pin
	PORTD |= (1 << 2);
  80:	8b b1       	in	r24, 0x0b	; 11
  82:	84 60       	ori	r24, 0x04	; 4
  84:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	25 e3       	ldi	r18, 0x35	; 53
  88:	2a 95       	dec	r18
  8a:	f1 f7       	brne	.-4      	; 0x88 <getDistance+0x8>
  8c:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1 << 2);
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	8b 7f       	andi	r24, 0xFB	; 251
  92:	8b b9       	out	0x0b, r24	; 11

	//wait for echo pin to receive the pulse
	while (!(PIND & (1 << 3)));
  94:	4b 9b       	sbis	0x09, 3	; 9
  96:	fe cf       	rjmp	.-4      	; 0x94 <getDistance+0x14>
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	05 c0       	rjmp	.+10     	; 0xa8 <getDistance+0x28>

	//measure how long echo pin stays HIGH
	while (PIND & (1 << 3)) {
		duration++;
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	25 e0       	ldi	r18, 0x05	; 5
  a2:	2a 95       	dec	r18
  a4:	f1 f7       	brne	.-4      	; 0xa2 <getDistance+0x22>
  a6:	00 00       	nop

	//wait for echo pin to receive the pulse
	while (!(PIND & (1 << 3)));

	//measure how long echo pin stays HIGH
	while (PIND & (1 << 3)) {
  a8:	4b 99       	sbic	0x09, 3	; 9
  aa:	f9 cf       	rjmp	.-14     	; 0x9e <getDistance+0x1e>
		duration++;
		_delay_us(1);
	}

	//calculate distance in cm: duration / 58 (for 1µs per round trip count at 340m/s sound speed)
	return duration / 58;
  ac:	6a e3       	ldi	r22, 0x3A	; 58
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	0e 94 75 00 	call	0xea	; 0xea <__divmodhi4>
  b4:	cb 01       	movw	r24, r22
}
  b6:	08 95       	ret

000000b8 <main>:
	//initialize to zero
	int distance = 0;
	
	//initialize ultrasonic sensor
	
	DDRD |= (1 << 2); //set trigger pin as output
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 3); //set echo pin as input
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	87 7f       	andi	r24, 0xF7	; 247
  c2:	8a b9       	out	0x0a, r24	; 10
	//PORTD &= ~(1 << 2); //initially make trigger pin low
	
	DDRD |= (1 << 0); //set PORTD0 as output for LED
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << 0); //initially make LED low
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	8b b9       	out	0x0b, r24	; 11

	while (1) {
		//get the distance from object to ultrasonic sensor
		distance = getDistance();
  d0:	0e 94 40 00 	call	0x80	; 0x80 <getDistance>
		//check if within sensor range (in centimeters)
		if (distance > 0 && distance <= 50) { 
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	c2 97       	sbiw	r24, 0x32	; 50
  d8:	20 f4       	brcc	.+8      	; 0xe2 <main+0x2a>
			//if detected, turn on LED
			PORTD |= (1 << 0);
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	f7 cf       	rjmp	.-18     	; 0xd0 <main+0x18>
			//else, not detected, turn on LED
			} else {
			PORTD &= ~(1 << 0);
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	f3 cf       	rjmp	.-26     	; 0xd0 <main+0x18>

000000ea <__divmodhi4>:
  ea:	97 fb       	bst	r25, 7
  ec:	07 2e       	mov	r0, r23
  ee:	16 f4       	brtc	.+4      	; 0xf4 <__divmodhi4+0xa>
  f0:	00 94       	com	r0
  f2:	07 d0       	rcall	.+14     	; 0x102 <__divmodhi4_neg1>
  f4:	77 fd       	sbrc	r23, 7
  f6:	09 d0       	rcall	.+18     	; 0x10a <__divmodhi4_neg2>
  f8:	0e 94 89 00 	call	0x112	; 0x112 <__udivmodhi4>
  fc:	07 fc       	sbrc	r0, 7
  fe:	05 d0       	rcall	.+10     	; 0x10a <__divmodhi4_neg2>
 100:	3e f4       	brtc	.+14     	; 0x110 <__divmodhi4_exit>

00000102 <__divmodhi4_neg1>:
 102:	90 95       	com	r25
 104:	81 95       	neg	r24
 106:	9f 4f       	sbci	r25, 0xFF	; 255
 108:	08 95       	ret

0000010a <__divmodhi4_neg2>:
 10a:	70 95       	com	r23
 10c:	61 95       	neg	r22
 10e:	7f 4f       	sbci	r23, 0xFF	; 255

00000110 <__divmodhi4_exit>:
 110:	08 95       	ret

00000112 <__udivmodhi4>:
 112:	aa 1b       	sub	r26, r26
 114:	bb 1b       	sub	r27, r27
 116:	51 e1       	ldi	r21, 0x11	; 17
 118:	07 c0       	rjmp	.+14     	; 0x128 <__udivmodhi4_ep>

0000011a <__udivmodhi4_loop>:
 11a:	aa 1f       	adc	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	a6 17       	cp	r26, r22
 120:	b7 07       	cpc	r27, r23
 122:	10 f0       	brcs	.+4      	; 0x128 <__udivmodhi4_ep>
 124:	a6 1b       	sub	r26, r22
 126:	b7 0b       	sbc	r27, r23

00000128 <__udivmodhi4_ep>:
 128:	88 1f       	adc	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	5a 95       	dec	r21
 12e:	a9 f7       	brne	.-22     	; 0x11a <__udivmodhi4_loop>
 130:	80 95       	com	r24
 132:	90 95       	com	r25
 134:	bc 01       	movw	r22, r24
 136:	cd 01       	movw	r24, r26
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
