
MicroFinalProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000492  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000927  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000727  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fb  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000451  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f3  00000000  00000000  00001e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  78:	0c 94 47 02 	jmp	0x48e	; 0x48e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setMotors>:
	setMotors(DUTY_CYCLE);
}

// Set duty cycle for all motors
void setMotors(float duty_cycle) {
	OCR0A = (uint8_t)(duty_cycle * 255);
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	4f e7       	ldi	r20, 0x7F	; 127
  86:	53 e4       	ldi	r21, 0x43	; 67
  88:	0e 94 8a 01 	call	0x314	; 0x314 <__mulsf3>
  8c:	0e 94 32 01 	call	0x264	; 0x264 <__fixunssfsi>
  90:	67 bd       	out	0x27, r22	; 39
	OCR0B = (uint8_t)(duty_cycle * 255);
  92:	68 bd       	out	0x28, r22	; 40
	OCR2A = (uint8_t)(duty_cycle * 255);
  94:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = (uint8_t)(duty_cycle * 255);
  98:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  9c:	08 95       	ret

0000009e <pwmInit>:
}

// PWM initialization
void pwmInit(void) {
	// Set PWM pins as outputs
	DDRD |= (1 << PD3) | (1 << PD5) | (1 << PD6);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	88 66       	ori	r24, 0x68	; 104
  a2:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PB3);
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	84 b9       	out	0x04, r24	; 4

	// Timer 0: Fast PWM, non-inverting, prescaler = 8
	TCCR0A = (1 << WGM00) | (1 << WGM01) | (1 << COM0A1) | (1 << COM0B1);
  aa:	93 ea       	ldi	r25, 0xA3	; 163
  ac:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	85 bd       	out	0x25, r24	; 37

	// Timer 2: Fast PWM, non-inverting, prescaler = 8
	TCCR2A = (1 << WGM20) | (1 << WGM21) | (1 << COM2A1) | (1 << COM2B1);
  b2:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS21);
  b6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

	// Set initial duty cycle
	setMotors(DUTY_CYCLE);
  ba:	68 e4       	ldi	r22, 0x48	; 72
  bc:	71 ee       	ldi	r23, 0xE1	; 225
  be:	8a e7       	ldi	r24, 0x7A	; 122
  c0:	9f e3       	ldi	r25, 0x3F	; 63
  c2:	0e 94 40 00 	call	0x80	; 0x80 <setMotors>
  c6:	08 95       	ret

000000c8 <getDistance>:
// Ultrasonic distance measurement function
int getDistance(uint8_t trigger_port, uint8_t trigger_pin, uint8_t echo_port, uint8_t echo_pin) {
	int duration = 0;

	// Send 10 µs pulse to the trigger pin
	if (trigger_port == PORTD) PORTD |= (1 << trigger_pin);
  c8:	9b b1       	in	r25, 0x0b	; 11
  ca:	98 13       	cpse	r25, r24
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <getDistance+0x1c>
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	e1 e0       	ldi	r30, 0x01	; 1
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	06 2e       	mov	r0, r22
  d6:	02 c0       	rjmp	.+4      	; 0xdc <getDistance+0x14>
  d8:	ee 0f       	add	r30, r30
  da:	ff 1f       	adc	r31, r31
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <getDistance+0x10>
  e0:	e9 2b       	or	r30, r25
  e2:	eb b9       	out	0x0b, r30	; 11
	if (trigger_port == PORTB) PORTB |= (1 << trigger_pin);
  e4:	95 b1       	in	r25, 0x05	; 5
  e6:	89 13       	cpse	r24, r25
  e8:	0b c0       	rjmp	.+22     	; 0x100 <getDistance+0x38>
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	e1 e0       	ldi	r30, 0x01	; 1
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	06 2e       	mov	r0, r22
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <getDistance+0x30>
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <getDistance+0x2c>
  fc:	e9 2b       	or	r30, r25
  fe:	e5 b9       	out	0x05, r30	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	95 e3       	ldi	r25, 0x35	; 53
 102:	9a 95       	dec	r25
 104:	f1 f7       	brne	.-4      	; 0x102 <getDistance+0x3a>
 106:	00 00       	nop
	_delay_us(10);
	if (trigger_port == PORTD) PORTD &= ~(1 << trigger_pin);
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	89 13       	cpse	r24, r25
 10c:	0c c0       	rjmp	.+24     	; 0x126 <getDistance+0x5e>
 10e:	9b b1       	in	r25, 0x0b	; 11
 110:	e1 e0       	ldi	r30, 0x01	; 1
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	06 2e       	mov	r0, r22
 116:	02 c0       	rjmp	.+4      	; 0x11c <getDistance+0x54>
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <getDistance+0x50>
 120:	e0 95       	com	r30
 122:	e9 23       	and	r30, r25
 124:	eb b9       	out	0x0b, r30	; 11
	if (trigger_port == PORTB) PORTB &= ~(1 << trigger_pin);
 126:	95 b1       	in	r25, 0x05	; 5
 128:	89 13       	cpse	r24, r25
 12a:	0b c0       	rjmp	.+22     	; 0x142 <getDistance+0x7a>
 12c:	35 b1       	in	r19, 0x05	; 5
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <getDistance+0x70>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <getDistance+0x6c>
 13c:	80 95       	com	r24
 13e:	83 23       	and	r24, r19
 140:	85 b9       	out	0x05, r24	; 5

	// Wait for echo to start
	int timeout = 30000;
 142:	60 e3       	ldi	r22, 0x30	; 48
 144:	75 e7       	ldi	r23, 0x75	; 117
	while (!(echo_port & (1 << echo_pin)) && --timeout);
 146:	84 2f       	mov	r24, r20
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 2e       	mov	r0, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <getDistance+0x8a>
 14e:	95 95       	asr	r25
 150:	87 95       	ror	r24
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <getDistance+0x86>
 156:	fc 01       	movw	r30, r24
 158:	e1 70       	andi	r30, 0x01	; 1
 15a:	ff 27       	eor	r31, r31
 15c:	80 fd       	sbrc	r24, 0
 15e:	03 c0       	rjmp	.+6      	; 0x166 <getDistance+0x9e>
 160:	61 50       	subi	r22, 0x01	; 1
 162:	71 09       	sbc	r23, r1
 164:	81 f7       	brne	.-32     	; 0x146 <getDistance+0x7e>
	if (timeout == 0) return -1;  // Timeout occurred
 166:	67 2b       	or	r22, r23
 168:	b9 f0       	breq	.+46     	; 0x198 <getDistance+0xd0>
 16a:	20 e3       	ldi	r18, 0x30	; 48
 16c:	35 e7       	ldi	r19, 0x75	; 117
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	05 c0       	rjmp	.+10     	; 0x17e <getDistance+0xb6>

	// Measure echo duration
	timeout = 30000;
	while (echo_port & (1 << echo_pin) && --timeout) {
		duration++;
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	45 e0       	ldi	r20, 0x05	; 5
 178:	4a 95       	dec	r20
 17a:	f1 f7       	brne	.-4      	; 0x178 <getDistance+0xb0>
 17c:	00 00       	nop
	while (!(echo_port & (1 << echo_pin)) && --timeout);
	if (timeout == 0) return -1;  // Timeout occurred

	// Measure echo duration
	timeout = 30000;
	while (echo_port & (1 << echo_pin) && --timeout) {
 17e:	30 97       	sbiw	r30, 0x00	; 0
 180:	19 f0       	breq	.+6      	; 0x188 <getDistance+0xc0>
 182:	21 50       	subi	r18, 0x01	; 1
 184:	31 09       	sbc	r19, r1
 186:	b1 f7       	brne	.-20     	; 0x174 <getDistance+0xac>
		duration++;
		_delay_us(1);
	}
	if (timeout == 0) return -1;  // Timeout occurred
 188:	23 2b       	or	r18, r19
 18a:	49 f0       	breq	.+18     	; 0x19e <getDistance+0xd6>

	return duration / 58;  // Convert duration to distance in cm
 18c:	6a e3       	ldi	r22, 0x3A	; 58
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	0e 94 1f 02 	call	0x43e	; 0x43e <__divmodhi4>
 194:	cb 01       	movw	r24, r22
 196:	08 95       	ret
	if (trigger_port == PORTB) PORTB &= ~(1 << trigger_pin);

	// Wait for echo to start
	int timeout = 30000;
	while (!(echo_port & (1 << echo_pin)) && --timeout);
	if (timeout == 0) return -1;  // Timeout occurred
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	9f ef       	ldi	r25, 0xFF	; 255
 19c:	08 95       	ret
	timeout = 30000;
	while (echo_port & (1 << echo_pin) && --timeout) {
		duration++;
		_delay_us(1);
	}
	if (timeout == 0) return -1;  // Timeout occurred
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	9f ef       	ldi	r25, 0xFF	; 255

	return duration / 58;  // Convert duration to distance in cm
}
 1a2:	08 95       	ret

000001a4 <main>:
int getDistance(uint8_t trigger_port, uint8_t trigger_pin, uint8_t echo_port, uint8_t echo_pin);
void setMotors(float duty_cycle);

int main(void) {
	// Initialization
	pwmInit();
 1a4:	0e 94 4f 00 	call	0x9e	; 0x9e <pwmInit>
	int left_distance = 0;
	int right_distance = 0;
	uint8_t motor_running = 1;  // 1 = running, 0 = stopped

	// LED configuration (outputs)
	DDRC |= (1 << PC3) | (1 << PC4) | (1 << PC5);  // Front, Left, Right LEDs
 1a8:	87 b1       	in	r24, 0x07	; 7
 1aa:	88 63       	ori	r24, 0x38	; 56
 1ac:	87 b9       	out	0x07, r24	; 7

	// Ultrasonic sensor configuration
	DDRD |= (1 << PD4) | (1 << PD2);  // Front and Left trigger as outputs
 1ae:	8a b1       	in	r24, 0x0a	; 10
 1b0:	84 61       	ori	r24, 0x14	; 20
 1b2:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PB0);               // Right trigger as output
 1b4:	84 b1       	in	r24, 0x04	; 4
 1b6:	81 60       	ori	r24, 0x01	; 1
 1b8:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2)); // Front, Left, Right echo as inputs
 1ba:	87 b1       	in	r24, 0x07	; 7
 1bc:	88 7f       	andi	r24, 0xF8	; 248
 1be:	87 b9       	out	0x07, r24	; 7
	// Initialization
	pwmInit();
	int front_distance = 0;
	int left_distance = 0;
	int right_distance = 0;
	uint8_t motor_running = 1;  // 1 = running, 0 = stopped
 1c0:	dd 24       	eor	r13, r13
 1c2:	d3 94       	inc	r13
	DDRB |= (1 << PB0);               // Right trigger as output
	DDRC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2)); // Front, Left, Right echo as inputs

	while (1) {
		// Measure distances
		front_distance = getDistance(PORTD, PD4, PINC, PC0);
 1c4:	46 b1       	in	r20, 0x06	; 6
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	64 e0       	ldi	r22, 0x04	; 4
 1cc:	0e 94 64 00 	call	0xc8	; 0xc8 <getDistance>
 1d0:	7c 01       	movw	r14, r24
		left_distance = getDistance(PORTD, PD2, PINC, PC1);
 1d2:	46 b1       	in	r20, 0x06	; 6
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	0e 94 64 00 	call	0xc8	; 0xc8 <getDistance>
 1de:	8c 01       	movw	r16, r24
		right_distance = getDistance(PORTB, PB0, PINC, PC2);
 1e0:	46 b1       	in	r20, 0x06	; 6
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	22 e0       	ldi	r18, 0x02	; 2
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	0e 94 64 00 	call	0xc8	; 0xc8 <getDistance>
 1ec:	ec 01       	movw	r28, r24

		// Front obstacle handling
		if (front_distance > 0 && front_distance <= 30) {
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	e8 1a       	sub	r14, r24
 1f2:	f1 08       	sbc	r15, r1
 1f4:	8e e1       	ldi	r24, 0x1E	; 30
 1f6:	e8 16       	cp	r14, r24
 1f8:	f1 04       	cpc	r15, r1
 1fa:	60 f4       	brcc	.+24     	; 0x214 <main+0x70>
			if (motor_running) {
 1fc:	dd 20       	and	r13, r13
 1fe:	b9 f0       	breq	.+46     	; 0x22e <main+0x8a>
				motor_running = 0;
				setMotors(SLOW_DUTY_CYCLE);  // Stop motors
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	cb 01       	movw	r24, r22
 206:	0e 94 40 00 	call	0x80	; 0x80 <setMotors>
				PORTC |= (1 << PC3);        // Front LED on
 20a:	88 b1       	in	r24, 0x08	; 8
 20c:	88 60       	ori	r24, 0x08	; 8
 20e:	88 b9       	out	0x08, r24	; 8
		right_distance = getDistance(PORTB, PB0, PINC, PC2);

		// Front obstacle handling
		if (front_distance > 0 && front_distance <= 30) {
			if (motor_running) {
				motor_running = 0;
 210:	d1 2c       	mov	r13, r1
 212:	0d c0       	rjmp	.+26     	; 0x22e <main+0x8a>
				setMotors(SLOW_DUTY_CYCLE);  // Stop motors
				PORTC |= (1 << PC3);        // Front LED on
			}
			} else {
			if (!motor_running) {
 214:	d1 10       	cpse	r13, r1
 216:	0b c0       	rjmp	.+22     	; 0x22e <main+0x8a>
				motor_running = 1;
				setMotors(DUTY_CYCLE);  // Start motors
 218:	68 e4       	ldi	r22, 0x48	; 72
 21a:	71 ee       	ldi	r23, 0xE1	; 225
 21c:	8a e7       	ldi	r24, 0x7A	; 122
 21e:	9f e3       	ldi	r25, 0x3F	; 63
 220:	0e 94 40 00 	call	0x80	; 0x80 <setMotors>
				PORTC &= ~(1 << PC3);  // Front LED off
 224:	88 b1       	in	r24, 0x08	; 8
 226:	87 7f       	andi	r24, 0xF7	; 247
 228:	88 b9       	out	0x08, r24	; 8
				setMotors(SLOW_DUTY_CYCLE);  // Stop motors
				PORTC |= (1 << PC3);        // Front LED on
			}
			} else {
			if (!motor_running) {
				motor_running = 1;
 22a:	dd 24       	eor	r13, r13
 22c:	d3 94       	inc	r13
				PORTC &= ~(1 << PC3);  // Front LED off
			}
		}

		// Left obstacle handling
		if (left_distance > 0 && left_distance <= 10) {
 22e:	01 50       	subi	r16, 0x01	; 1
 230:	11 09       	sbc	r17, r1
 232:	0a 30       	cpi	r16, 0x0A	; 10
 234:	11 05       	cpc	r17, r1
 236:	20 f4       	brcc	.+8      	; 0x240 <main+0x9c>
			PORTC |= (1 << PC4);  //left LED on
 238:	88 b1       	in	r24, 0x08	; 8
 23a:	80 61       	ori	r24, 0x10	; 16
 23c:	88 b9       	out	0x08, r24	; 8
 23e:	03 c0       	rjmp	.+6      	; 0x246 <main+0xa2>
			}
			else {
			PORTC &= ~(1 << PC4); // Left LED off
 240:	88 b1       	in	r24, 0x08	; 8
 242:	8f 7e       	andi	r24, 0xEF	; 239
 244:	88 b9       	out	0x08, r24	; 8
		}

		// Right obstacle handling
		if (right_distance > 0 && right_distance <= 10) {
 246:	21 97       	sbiw	r28, 0x01	; 1
 248:	2a 97       	sbiw	r28, 0x0a	; 10
 24a:	20 f4       	brcc	.+8      	; 0x254 <main+0xb0>
			PORTC |= (1 << PC5);  // Right LED on
 24c:	88 b1       	in	r24, 0x08	; 8
 24e:	80 62       	ori	r24, 0x20	; 32
 250:	88 b9       	out	0x08, r24	; 8
 252:	03 c0       	rjmp	.+6      	; 0x25a <main+0xb6>
			} else {
			PORTC &= ~(1 << PC5); // Right LED off
 254:	88 b1       	in	r24, 0x08	; 8
 256:	8f 7d       	andi	r24, 0xDF	; 223
 258:	88 b9       	out	0x08, r24	; 8
 25a:	85 e3       	ldi	r24, 0x35	; 53
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0xb8>
 260:	00 00       	nop
 262:	b0 cf       	rjmp	.-160    	; 0x1c4 <main+0x20>

00000264 <__fixunssfsi>:
 264:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__fp_splitA>
 268:	88 f0       	brcs	.+34     	; 0x28c <__fixunssfsi+0x28>
 26a:	9f 57       	subi	r25, 0x7F	; 127
 26c:	98 f0       	brcs	.+38     	; 0x294 <__fixunssfsi+0x30>
 26e:	b9 2f       	mov	r27, r25
 270:	99 27       	eor	r25, r25
 272:	b7 51       	subi	r27, 0x17	; 23
 274:	b0 f0       	brcs	.+44     	; 0x2a2 <__fixunssfsi+0x3e>
 276:	e1 f0       	breq	.+56     	; 0x2b0 <__fixunssfsi+0x4c>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	88 1f       	adc	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	1a f0       	brmi	.+6      	; 0x288 <__fixunssfsi+0x24>
 282:	ba 95       	dec	r27
 284:	c9 f7       	brne	.-14     	; 0x278 <__fixunssfsi+0x14>
 286:	14 c0       	rjmp	.+40     	; 0x2b0 <__fixunssfsi+0x4c>
 288:	b1 30       	cpi	r27, 0x01	; 1
 28a:	91 f0       	breq	.+36     	; 0x2b0 <__fixunssfsi+0x4c>
 28c:	0e 94 83 01 	call	0x306	; 0x306 <__fp_zero>
 290:	b1 e0       	ldi	r27, 0x01	; 1
 292:	08 95       	ret
 294:	0c 94 83 01 	jmp	0x306	; 0x306 <__fp_zero>
 298:	67 2f       	mov	r22, r23
 29a:	78 2f       	mov	r23, r24
 29c:	88 27       	eor	r24, r24
 29e:	b8 5f       	subi	r27, 0xF8	; 248
 2a0:	39 f0       	breq	.+14     	; 0x2b0 <__fixunssfsi+0x4c>
 2a2:	b9 3f       	cpi	r27, 0xF9	; 249
 2a4:	cc f3       	brlt	.-14     	; 0x298 <__fixunssfsi+0x34>
 2a6:	86 95       	lsr	r24
 2a8:	77 95       	ror	r23
 2aa:	67 95       	ror	r22
 2ac:	b3 95       	inc	r27
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__fixunssfsi+0x42>
 2b0:	3e f4       	brtc	.+14     	; 0x2c0 <__fixunssfsi+0x5c>
 2b2:	90 95       	com	r25
 2b4:	80 95       	com	r24
 2b6:	70 95       	com	r23
 2b8:	61 95       	neg	r22
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	8f 4f       	sbci	r24, 0xFF	; 255
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	08 95       	ret

000002c2 <__fp_split3>:
 2c2:	57 fd       	sbrc	r21, 7
 2c4:	90 58       	subi	r25, 0x80	; 128
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	59 f0       	breq	.+22     	; 0x2e2 <__fp_splitA+0x10>
 2cc:	5f 3f       	cpi	r21, 0xFF	; 255
 2ce:	71 f0       	breq	.+28     	; 0x2ec <__fp_splitA+0x1a>
 2d0:	47 95       	ror	r20

000002d2 <__fp_splitA>:
 2d2:	88 0f       	add	r24, r24
 2d4:	97 fb       	bst	r25, 7
 2d6:	99 1f       	adc	r25, r25
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <__fp_splitA+0x20>
 2da:	9f 3f       	cpi	r25, 0xFF	; 255
 2dc:	79 f0       	breq	.+30     	; 0x2fc <__fp_splitA+0x2a>
 2de:	87 95       	ror	r24
 2e0:	08 95       	ret
 2e2:	12 16       	cp	r1, r18
 2e4:	13 06       	cpc	r1, r19
 2e6:	14 06       	cpc	r1, r20
 2e8:	55 1f       	adc	r21, r21
 2ea:	f2 cf       	rjmp	.-28     	; 0x2d0 <__fp_split3+0xe>
 2ec:	46 95       	lsr	r20
 2ee:	f1 df       	rcall	.-30     	; 0x2d2 <__fp_splitA>
 2f0:	08 c0       	rjmp	.+16     	; 0x302 <__fp_splitA+0x30>
 2f2:	16 16       	cp	r1, r22
 2f4:	17 06       	cpc	r1, r23
 2f6:	18 06       	cpc	r1, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	f1 cf       	rjmp	.-30     	; 0x2de <__fp_splitA+0xc>
 2fc:	86 95       	lsr	r24
 2fe:	71 05       	cpc	r23, r1
 300:	61 05       	cpc	r22, r1
 302:	08 94       	sec
 304:	08 95       	ret

00000306 <__fp_zero>:
 306:	e8 94       	clt

00000308 <__fp_szero>:
 308:	bb 27       	eor	r27, r27
 30a:	66 27       	eor	r22, r22
 30c:	77 27       	eor	r23, r23
 30e:	cb 01       	movw	r24, r22
 310:	97 f9       	bld	r25, 7
 312:	08 95       	ret

00000314 <__mulsf3>:
 314:	0e 94 9d 01 	call	0x33a	; 0x33a <__mulsf3x>
 318:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__fp_round>
 31c:	0e 94 00 02 	call	0x400	; 0x400 <__fp_pscA>
 320:	38 f0       	brcs	.+14     	; 0x330 <__mulsf3+0x1c>
 322:	0e 94 07 02 	call	0x40e	; 0x40e <__fp_pscB>
 326:	20 f0       	brcs	.+8      	; 0x330 <__mulsf3+0x1c>
 328:	95 23       	and	r25, r21
 32a:	11 f0       	breq	.+4      	; 0x330 <__mulsf3+0x1c>
 32c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__fp_inf>
 330:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__fp_nan>
 334:	11 24       	eor	r1, r1
 336:	0c 94 84 01 	jmp	0x308	; 0x308 <__fp_szero>

0000033a <__mulsf3x>:
 33a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__fp_split3>
 33e:	70 f3       	brcs	.-36     	; 0x31c <__mulsf3+0x8>

00000340 <__mulsf3_pse>:
 340:	95 9f       	mul	r25, r21
 342:	c1 f3       	breq	.-16     	; 0x334 <__mulsf3+0x20>
 344:	95 0f       	add	r25, r21
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	55 1f       	adc	r21, r21
 34a:	62 9f       	mul	r22, r18
 34c:	f0 01       	movw	r30, r0
 34e:	72 9f       	mul	r23, r18
 350:	bb 27       	eor	r27, r27
 352:	f0 0d       	add	r31, r0
 354:	b1 1d       	adc	r27, r1
 356:	63 9f       	mul	r22, r19
 358:	aa 27       	eor	r26, r26
 35a:	f0 0d       	add	r31, r0
 35c:	b1 1d       	adc	r27, r1
 35e:	aa 1f       	adc	r26, r26
 360:	64 9f       	mul	r22, r20
 362:	66 27       	eor	r22, r22
 364:	b0 0d       	add	r27, r0
 366:	a1 1d       	adc	r26, r1
 368:	66 1f       	adc	r22, r22
 36a:	82 9f       	mul	r24, r18
 36c:	22 27       	eor	r18, r18
 36e:	b0 0d       	add	r27, r0
 370:	a1 1d       	adc	r26, r1
 372:	62 1f       	adc	r22, r18
 374:	73 9f       	mul	r23, r19
 376:	b0 0d       	add	r27, r0
 378:	a1 1d       	adc	r26, r1
 37a:	62 1f       	adc	r22, r18
 37c:	83 9f       	mul	r24, r19
 37e:	a0 0d       	add	r26, r0
 380:	61 1d       	adc	r22, r1
 382:	22 1f       	adc	r18, r18
 384:	74 9f       	mul	r23, r20
 386:	33 27       	eor	r19, r19
 388:	a0 0d       	add	r26, r0
 38a:	61 1d       	adc	r22, r1
 38c:	23 1f       	adc	r18, r19
 38e:	84 9f       	mul	r24, r20
 390:	60 0d       	add	r22, r0
 392:	21 1d       	adc	r18, r1
 394:	82 2f       	mov	r24, r18
 396:	76 2f       	mov	r23, r22
 398:	6a 2f       	mov	r22, r26
 39a:	11 24       	eor	r1, r1
 39c:	9f 57       	subi	r25, 0x7F	; 127
 39e:	50 40       	sbci	r21, 0x00	; 0
 3a0:	9a f0       	brmi	.+38     	; 0x3c8 <__mulsf3_pse+0x88>
 3a2:	f1 f0       	breq	.+60     	; 0x3e0 <__mulsf3_pse+0xa0>
 3a4:	88 23       	and	r24, r24
 3a6:	4a f0       	brmi	.+18     	; 0x3ba <__mulsf3_pse+0x7a>
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	bb 1f       	adc	r27, r27
 3ae:	66 1f       	adc	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	91 50       	subi	r25, 0x01	; 1
 3b6:	50 40       	sbci	r21, 0x00	; 0
 3b8:	a9 f7       	brne	.-22     	; 0x3a4 <__mulsf3_pse+0x64>
 3ba:	9e 3f       	cpi	r25, 0xFE	; 254
 3bc:	51 05       	cpc	r21, r1
 3be:	80 f0       	brcs	.+32     	; 0x3e0 <__mulsf3_pse+0xa0>
 3c0:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__fp_inf>
 3c4:	0c 94 84 01 	jmp	0x308	; 0x308 <__fp_szero>
 3c8:	5f 3f       	cpi	r21, 0xFF	; 255
 3ca:	e4 f3       	brlt	.-8      	; 0x3c4 <__mulsf3_pse+0x84>
 3cc:	98 3e       	cpi	r25, 0xE8	; 232
 3ce:	d4 f3       	brlt	.-12     	; 0x3c4 <__mulsf3_pse+0x84>
 3d0:	86 95       	lsr	r24
 3d2:	77 95       	ror	r23
 3d4:	67 95       	ror	r22
 3d6:	b7 95       	ror	r27
 3d8:	f7 95       	ror	r31
 3da:	e7 95       	ror	r30
 3dc:	9f 5f       	subi	r25, 0xFF	; 255
 3de:	c1 f7       	brne	.-16     	; 0x3d0 <__mulsf3_pse+0x90>
 3e0:	fe 2b       	or	r31, r30
 3e2:	88 0f       	add	r24, r24
 3e4:	91 1d       	adc	r25, r1
 3e6:	96 95       	lsr	r25
 3e8:	87 95       	ror	r24
 3ea:	97 f9       	bld	r25, 7
 3ec:	08 95       	ret

000003ee <__fp_inf>:
 3ee:	97 f9       	bld	r25, 7
 3f0:	9f 67       	ori	r25, 0x7F	; 127
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	08 95       	ret

000003fa <__fp_nan>:
 3fa:	9f ef       	ldi	r25, 0xFF	; 255
 3fc:	80 ec       	ldi	r24, 0xC0	; 192
 3fe:	08 95       	ret

00000400 <__fp_pscA>:
 400:	00 24       	eor	r0, r0
 402:	0a 94       	dec	r0
 404:	16 16       	cp	r1, r22
 406:	17 06       	cpc	r1, r23
 408:	18 06       	cpc	r1, r24
 40a:	09 06       	cpc	r0, r25
 40c:	08 95       	ret

0000040e <__fp_pscB>:
 40e:	00 24       	eor	r0, r0
 410:	0a 94       	dec	r0
 412:	12 16       	cp	r1, r18
 414:	13 06       	cpc	r1, r19
 416:	14 06       	cpc	r1, r20
 418:	05 06       	cpc	r0, r21
 41a:	08 95       	ret

0000041c <__fp_round>:
 41c:	09 2e       	mov	r0, r25
 41e:	03 94       	inc	r0
 420:	00 0c       	add	r0, r0
 422:	11 f4       	brne	.+4      	; 0x428 <__fp_round+0xc>
 424:	88 23       	and	r24, r24
 426:	52 f0       	brmi	.+20     	; 0x43c <__fp_round+0x20>
 428:	bb 0f       	add	r27, r27
 42a:	40 f4       	brcc	.+16     	; 0x43c <__fp_round+0x20>
 42c:	bf 2b       	or	r27, r31
 42e:	11 f4       	brne	.+4      	; 0x434 <__fp_round+0x18>
 430:	60 ff       	sbrs	r22, 0
 432:	04 c0       	rjmp	.+8      	; 0x43c <__fp_round+0x20>
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	08 95       	ret

0000043e <__divmodhi4>:
 43e:	97 fb       	bst	r25, 7
 440:	07 2e       	mov	r0, r23
 442:	16 f4       	brtc	.+4      	; 0x448 <__divmodhi4+0xa>
 444:	00 94       	com	r0
 446:	07 d0       	rcall	.+14     	; 0x456 <__divmodhi4_neg1>
 448:	77 fd       	sbrc	r23, 7
 44a:	09 d0       	rcall	.+18     	; 0x45e <__divmodhi4_neg2>
 44c:	0e 94 33 02 	call	0x466	; 0x466 <__udivmodhi4>
 450:	07 fc       	sbrc	r0, 7
 452:	05 d0       	rcall	.+10     	; 0x45e <__divmodhi4_neg2>
 454:	3e f4       	brtc	.+14     	; 0x464 <__divmodhi4_exit>

00000456 <__divmodhi4_neg1>:
 456:	90 95       	com	r25
 458:	81 95       	neg	r24
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	08 95       	ret

0000045e <__divmodhi4_neg2>:
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255

00000464 <__divmodhi4_exit>:
 464:	08 95       	ret

00000466 <__udivmodhi4>:
 466:	aa 1b       	sub	r26, r26
 468:	bb 1b       	sub	r27, r27
 46a:	51 e1       	ldi	r21, 0x11	; 17
 46c:	07 c0       	rjmp	.+14     	; 0x47c <__udivmodhi4_ep>

0000046e <__udivmodhi4_loop>:
 46e:	aa 1f       	adc	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	a6 17       	cp	r26, r22
 474:	b7 07       	cpc	r27, r23
 476:	10 f0       	brcs	.+4      	; 0x47c <__udivmodhi4_ep>
 478:	a6 1b       	sub	r26, r22
 47a:	b7 0b       	sbc	r27, r23

0000047c <__udivmodhi4_ep>:
 47c:	88 1f       	adc	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	5a 95       	dec	r21
 482:	a9 f7       	brne	.-22     	; 0x46e <__udivmodhi4_loop>
 484:	80 95       	com	r24
 486:	90 95       	com	r25
 488:	bc 01       	movw	r22, r24
 48a:	cd 01       	movw	r24, r26
 48c:	08 95       	ret

0000048e <_exit>:
 48e:	f8 94       	cli

00000490 <__stop_program>:
 490:	ff cf       	rjmp	.-2      	; 0x490 <__stop_program>
