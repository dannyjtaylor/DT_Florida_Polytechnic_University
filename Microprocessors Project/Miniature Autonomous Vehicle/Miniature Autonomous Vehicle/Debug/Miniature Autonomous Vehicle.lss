
Miniature Autonomous Vehicle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000982  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d4  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000049b  00000000  00000000  0000137a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000482  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000245  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  78:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <detectionLEDInit>:
		_delay_us(1);
	}

	//calculate distance in cm: duration / 58 (for 1µs per round trip count at 340m/s (speed of sound) )
	return durationRight / 58;
}
  80:	87 b1       	in	r24, 0x07	; 7
  82:	81 60       	ori	r24, 0x01	; 1
  84:	87 b9       	out	0x07, r24	; 7
  86:	87 b1       	in	r24, 0x07	; 7
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	87 b9       	out	0x07, r24	; 7
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	87 b9       	out	0x07, r24	; 7
  92:	08 95       	ret

00000094 <motorPWMInit>:
  94:	23 e8       	ldi	r18, 0x83	; 131
  96:	24 bd       	out	0x24, r18	; 36
  98:	92 e0       	ldi	r25, 0x02	; 2
  9a:	95 bd       	out	0x25, r25	; 37
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	17 bc       	out	0x27, r1	; 39
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	18 bc       	out	0x28, r1	; 40
  ac:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  b0:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	84 b9       	out	0x04, r24	; 4
  ba:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	8a b9       	out	0x0a, r24	; 10
  c4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  c8:	08 95       	ret

000000ca <leftUltrasonicInit>:
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	8f 7e       	andi	r24, 0xEF	; 239
  d4:	8a b9       	out	0x0a, r24	; 10
  d6:	08 95       	ret

000000d8 <rightUltrasonicInit>:
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	84 b9       	out	0x04, r24	; 4
  e4:	08 95       	ret

000000e6 <frontUltrasonicInit>:
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	8a b9       	out	0x0a, r24	; 10
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	8a b9       	out	0x0a, r24	; 10
  f2:	08 95       	ret

000000f4 <getDistanceFront>:
int getDistanceFront() {
	//duration variable
	int durationFront = 0;
	
	//send a 10 µs high pulse to the front ultrasonic trigger pin
	PORTD |= (1 << 0);
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	25 e3       	ldi	r18, 0x35	; 53
  fc:	2a 95       	dec	r18
  fe:	f1 f7       	brne	.-4      	; 0xfc <getDistanceFront+0x8>
 100:	00 00       	nop
	_delay_us(10);
	PORTC &= ~(1 << 0);
 102:	88 b1       	in	r24, 0x08	; 8
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	88 b9       	out	0x08, r24	; 8

	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 1)));
 108:	31 9b       	sbis	0x06, 1	; 6
 10a:	fe cf       	rjmp	.-4      	; 0x108 <getDistanceFront+0x14>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	05 c0       	rjmp	.+10     	; 0x11c <getDistanceFront+0x28>

	//measure how long echo pin stays HIGH
	while (PINC & (1 << 1)) {
		durationFront++;
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	25 e0       	ldi	r18, 0x05	; 5
 116:	2a 95       	dec	r18
 118:	f1 f7       	brne	.-4      	; 0x116 <getDistanceFront+0x22>
 11a:	00 00       	nop

	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 1)));

	//measure how long echo pin stays HIGH
	while (PINC & (1 << 1)) {
 11c:	31 99       	sbic	0x06, 1	; 6
 11e:	f9 cf       	rjmp	.-14     	; 0x112 <getDistanceFront+0x1e>
		durationFront++;
		_delay_us(1);
	}

	//calculate distance in cm: duration / 58 (for 1µs per round trip count at 340m/s (speed of sound) )
	return durationFront / 58;
 120:	6a e3       	ldi	r22, 0x3A	; 58
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__divmodhi4>
 128:	cb 01       	movw	r24, r22
}
 12a:	08 95       	ret

0000012c <main>:
	
	//int left_distance = 0; 
	//int right_distance = 0;
	int front_distance = 0;
	
	detectionLEDInit();
 12c:	0e 94 40 00 	call	0x80	; 0x80 <detectionLEDInit>
	leftUltrasonicInit();
 130:	0e 94 65 00 	call	0xca	; 0xca <leftUltrasonicInit>
	rightUltrasonicInit();
 134:	0e 94 6c 00 	call	0xd8	; 0xd8 <rightUltrasonicInit>
	frontUltrasonicInit();
 138:	0e 94 73 00 	call	0xe6	; 0xe6 <frontUltrasonicInit>
	motorPWMInit();
 13c:	0e 94 4a 00 	call	0x94	; 0x94 <motorPWMInit>
	
	//initialize speed of wheels, set each to 50% duty
	OCR0A = 128; //50% duty of FRONT LEFT WHEEL
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	87 bd       	out	0x27, r24	; 39
	OCR0B = 128; //50% duty of REAR LEFT WHEEL
 144:	88 bd       	out	0x28, r24	; 40
	OCR2A = 128; //50% duty of FRONT RIGHT WHEEL
 146:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 128; //50% duty of REAR RIGHT WHEEL
 14a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	
	while (1) {
		//at each instance of while loop, find the current distance to any object from the 3 sensors
		//left_distance = getDistanceLeft();
		//right_distance = getDistanceRight();
		front_distance = getDistanceFront();
 14e:	0e 94 7a 00 	call	0xf4	; 0xf4 <getDistanceFront>
		
		// else if statement to check if the front distance is 5 centimeters away or less
		if (front_distance > 0 && front_distance <= 5) {
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	05 97       	sbiw	r24, 0x05	; 5
 156:	80 f4       	brcc	.+32     	; 0x178 <main+0x4c>
			//OCR2A = 0;
			//OCR0B = 0;
			//OCR2B = 0;
			
			
			PORTD &= ~(1<<3);
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	87 7f       	andi	r24, 0xF7	; 247
 15c:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<5);
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	8f 7d       	andi	r24, 0xDF	; 223
 162:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<6);
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	8f 7b       	andi	r24, 0xBF	; 191
 168:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1<<3);
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	87 7f       	andi	r24, 0xF7	; 247
 16e:	85 b9       	out	0x05, r24	; 5
			//then, set PORTC PIN 2 to turn LED on
			PORTC |= 1<<2;
 170:	88 b1       	in	r24, 0x08	; 8
 172:	84 60       	ori	r24, 0x04	; 4
 174:	88 b9       	out	0x08, r24	; 8
 176:	15 c0       	rjmp	.+42     	; 0x1a2 <main+0x76>
			//OCR2A = 128;
			//OCR0B = 128;
			//OCR0A = 128;
			
			
			PORTD |= (1<<3);
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1<<5);
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 62       	ori	r24, 0x20	; 32
 182:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1<<6);
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 64       	ori	r24, 0x40	; 64
 188:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (1<<3);
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	85 b9       	out	0x05, r24	; 5
			//and then ensure LEDs are turned off
			PORTC &= ~(1<<0);
 190:	88 b1       	in	r24, 0x08	; 8
 192:	8e 7f       	andi	r24, 0xFE	; 254
 194:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<1);
 196:	88 b1       	in	r24, 0x08	; 8
 198:	8d 7f       	andi	r24, 0xFD	; 253
 19a:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<2);
 19c:	88 b1       	in	r24, 0x08	; 8
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	88 b9       	out	0x08, r24	; 8
 1a2:	85 e3       	ldi	r24, 0x35	; 53
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x78>
 1a8:	00 00       	nop
 1aa:	d1 cf       	rjmp	.-94     	; 0x14e <main+0x22>

000001ac <__divmodhi4>:
 1ac:	97 fb       	bst	r25, 7
 1ae:	07 2e       	mov	r0, r23
 1b0:	16 f4       	brtc	.+4      	; 0x1b6 <__divmodhi4+0xa>
 1b2:	00 94       	com	r0
 1b4:	07 d0       	rcall	.+14     	; 0x1c4 <__divmodhi4_neg1>
 1b6:	77 fd       	sbrc	r23, 7
 1b8:	09 d0       	rcall	.+18     	; 0x1cc <__divmodhi4_neg2>
 1ba:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__udivmodhi4>
 1be:	07 fc       	sbrc	r0, 7
 1c0:	05 d0       	rcall	.+10     	; 0x1cc <__divmodhi4_neg2>
 1c2:	3e f4       	brtc	.+14     	; 0x1d2 <__divmodhi4_exit>

000001c4 <__divmodhi4_neg1>:
 1c4:	90 95       	com	r25
 1c6:	81 95       	neg	r24
 1c8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ca:	08 95       	ret

000001cc <__divmodhi4_neg2>:
 1cc:	70 95       	com	r23
 1ce:	61 95       	neg	r22
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255

000001d2 <__divmodhi4_exit>:
 1d2:	08 95       	ret

000001d4 <__udivmodhi4>:
 1d4:	aa 1b       	sub	r26, r26
 1d6:	bb 1b       	sub	r27, r27
 1d8:	51 e1       	ldi	r21, 0x11	; 17
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <__udivmodhi4_ep>

000001dc <__udivmodhi4_loop>:
 1dc:	aa 1f       	adc	r26, r26
 1de:	bb 1f       	adc	r27, r27
 1e0:	a6 17       	cp	r26, r22
 1e2:	b7 07       	cpc	r27, r23
 1e4:	10 f0       	brcs	.+4      	; 0x1ea <__udivmodhi4_ep>
 1e6:	a6 1b       	sub	r26, r22
 1e8:	b7 0b       	sbc	r27, r23

000001ea <__udivmodhi4_ep>:
 1ea:	88 1f       	adc	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	5a 95       	dec	r21
 1f0:	a9 f7       	brne	.-22     	; 0x1dc <__udivmodhi4_loop>
 1f2:	80 95       	com	r24
 1f4:	90 95       	com	r25
 1f6:	bc 01       	movw	r22, r24
 1f8:	cd 01       	movw	r24, r26
 1fa:	08 95       	ret

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
