
Ultrasonic_Front_Left_Right_Testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000932  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c8  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d2  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049b  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000245  00000000  00000000  00001b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6d 00 	call	0xda	; 0xda <main>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <testLEDInit>:
		_delay_us(1);
	}

	//calculate distance in cm: duration / 58 (for 1µs per round trip count at 340m/s (speed of sound) )
	return frontDuration / 58;
}
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	84 60       	ori	r24, 0x04	; 4
  84:	8a b9       	out	0x0a, r24	; 10
  86:	84 b1       	in	r24, 0x04	; 4
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	84 b9       	out	0x04, r24	; 4
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	84 b9       	out	0x04, r24	; 4
  92:	08 95       	ret

00000094 <leftUltrasonicInit>:
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	81 60       	ori	r24, 0x01	; 1
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	08 95       	ret

000000a2 <getDistanceLeft>:
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	25 e3       	ldi	r18, 0x35	; 53
  aa:	2a 95       	dec	r18
  ac:	f1 f7       	brne	.-4      	; 0xaa <getDistanceLeft+0x8>
  ae:	00 00       	nop
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	49 9b       	sbis	0x09, 1	; 9
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <getDistanceLeft+0x14>
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	05 c0       	rjmp	.+10     	; 0xca <getDistanceLeft+0x28>
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	25 e0       	ldi	r18, 0x05	; 5
  c4:	2a 95       	dec	r18
  c6:	f1 f7       	brne	.-4      	; 0xc4 <getDistanceLeft+0x22>
  c8:	00 00       	nop
  ca:	49 99       	sbic	0x09, 1	; 9
  cc:	f9 cf       	rjmp	.-14     	; 0xc0 <getDistanceLeft+0x1e>
  ce:	6a e3       	ldi	r22, 0x3A	; 58
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	0e 94 7e 00 	call	0xfc	; 0xfc <__divmodhi4>
  d6:	cb 01       	movw	r24, r22
  d8:	08 95       	ret

000000da <main>:
int main(void) {	
	int left_distance = 0;
	int right_distance = 0;
	int front_distance = 0;
	
	testLEDInit();
  da:	0e 94 40 00 	call	0x80	; 0x80 <testLEDInit>
	leftUltrasonicInit();
  de:	0e 94 4a 00 	call	0x94	; 0x94 <leftUltrasonicInit>
	while(1) {
		left_distance = getDistanceLeft();
  e2:	0e 94 51 00 	call	0xa2	; 0xa2 <getDistanceLeft>
		if (left_distance > 0 && left_distance <= 15) {
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	0f 97       	sbiw	r24, 0x0f	; 15
  ea:	20 f4       	brcc	.+8      	; 0xf4 <main+0x1a>
			//then go slower on the right side, by decreasing the front right wheel by 10 clock cycles
			//OCR2A -= 10;
			PORTD |= 1<<2;
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	f7 cf       	rjmp	.-18     	; 0xe2 <main+0x8>
				}
				else {
					PORTD &= ~(1<<2);
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	8b 7f       	andi	r24, 0xFB	; 251
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	f3 cf       	rjmp	.-26     	; 0xe2 <main+0x8>

000000fc <__divmodhi4>:
  fc:	97 fb       	bst	r25, 7
  fe:	07 2e       	mov	r0, r23
 100:	16 f4       	brtc	.+4      	; 0x106 <__divmodhi4+0xa>
 102:	00 94       	com	r0
 104:	07 d0       	rcall	.+14     	; 0x114 <__divmodhi4_neg1>
 106:	77 fd       	sbrc	r23, 7
 108:	09 d0       	rcall	.+18     	; 0x11c <__divmodhi4_neg2>
 10a:	0e 94 92 00 	call	0x124	; 0x124 <__udivmodhi4>
 10e:	07 fc       	sbrc	r0, 7
 110:	05 d0       	rcall	.+10     	; 0x11c <__divmodhi4_neg2>
 112:	3e f4       	brtc	.+14     	; 0x122 <__divmodhi4_exit>

00000114 <__divmodhi4_neg1>:
 114:	90 95       	com	r25
 116:	81 95       	neg	r24
 118:	9f 4f       	sbci	r25, 0xFF	; 255
 11a:	08 95       	ret

0000011c <__divmodhi4_neg2>:
 11c:	70 95       	com	r23
 11e:	61 95       	neg	r22
 120:	7f 4f       	sbci	r23, 0xFF	; 255

00000122 <__divmodhi4_exit>:
 122:	08 95       	ret

00000124 <__udivmodhi4>:
 124:	aa 1b       	sub	r26, r26
 126:	bb 1b       	sub	r27, r27
 128:	51 e1       	ldi	r21, 0x11	; 17
 12a:	07 c0       	rjmp	.+14     	; 0x13a <__udivmodhi4_ep>

0000012c <__udivmodhi4_loop>:
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	a6 17       	cp	r26, r22
 132:	b7 07       	cpc	r27, r23
 134:	10 f0       	brcs	.+4      	; 0x13a <__udivmodhi4_ep>
 136:	a6 1b       	sub	r26, r22
 138:	b7 0b       	sbc	r27, r23

0000013a <__udivmodhi4_ep>:
 13a:	88 1f       	adc	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	5a 95       	dec	r21
 140:	a9 f7       	brne	.-22     	; 0x12c <__udivmodhi4_loop>
 142:	80 95       	com	r24
 144:	90 95       	com	r25
 146:	bc 01       	movw	r22, r24
 148:	cd 01       	movw	r24, r26
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
