
Front_Detection_to_Stop_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091c  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006be  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000435  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001790  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000444  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b7  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 94 00 	call	0x128	; 0x128 <main>
  78:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <getDistanceLeft>:
int getDistanceLeft() {
	//duration variable
	int durationLeft = 0;
	
	//send a 10탎 high pulse to the left ultrasonic trigger pin on pin D0
	PORTD |= (1 << 2);
  80:	8b b1       	in	r24, 0x0b	; 11
  82:	84 60       	ori	r24, 0x04	; 4
  84:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	25 e3       	ldi	r18, 0x35	; 53
  88:	2a 95       	dec	r18
  8a:	f1 f7       	brne	.-4      	; 0x88 <getDistanceLeft+0x8>
  8c:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1 << 2);
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	8b 7f       	andi	r24, 0xFB	; 251
  92:	8b b9       	out	0x0b, r24	; 11

	//wait for echo pin to receive the pulse
	while (!(PIND & (1 << 7)));
  94:	4f 9b       	sbis	0x09, 7	; 9
  96:	fe cf       	rjmp	.-4      	; 0x94 <getDistanceLeft+0x14>
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	05 c0       	rjmp	.+10     	; 0xa8 <getDistanceLeft+0x28>

	//measure how long echo pin stays HIGH
	while (PIND & (1 << 7)) {
		durationLeft++;
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	25 e0       	ldi	r18, 0x05	; 5
  a2:	2a 95       	dec	r18
  a4:	f1 f7       	brne	.-4      	; 0xa2 <getDistanceLeft+0x22>
  a6:	00 00       	nop

	//wait for echo pin to receive the pulse
	while (!(PIND & (1 << 7)));

	//measure how long echo pin stays HIGH
	while (PIND & (1 << 7)) {
  a8:	4f 99       	sbic	0x09, 7	; 9
  aa:	f9 cf       	rjmp	.-14     	; 0x9e <getDistanceLeft+0x1e>
		durationLeft++;
		_delay_us(1);
	}
	//calculate distance in cm: duration / 58 (for 1탎 per round trip count at 340m/s (speed of sound) )
	return durationLeft / 58;
  ac:	6a e3       	ldi	r22, 0x3A	; 58
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	0e 94 18 01 	call	0x230	; 0x230 <__divmodhi4>
  b4:	cb 01       	movw	r24, r22
}
  b6:	08 95       	ret

000000b8 <getDistanceRight>:
int getDistanceRight() {
	//duration variable
	int durationRight = 0;
	
	//send a 10탎 high pulse to the Right ultrasonic trigger pin on pin D0
	PORTB |= (1 << 1);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	85 b9       	out	0x05, r24	; 5
  be:	25 e3       	ldi	r18, 0x35	; 53
  c0:	2a 95       	dec	r18
  c2:	f1 f7       	brne	.-4      	; 0xc0 <getDistanceRight+0x8>
  c4:	00 00       	nop
	_delay_us(10);
	PORTB &= ~(1 << 1);
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8d 7f       	andi	r24, 0xFD	; 253
  ca:	85 b9       	out	0x05, r24	; 5

	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 5)));
  cc:	35 9b       	sbis	0x06, 5	; 6
  ce:	fe cf       	rjmp	.-4      	; 0xcc <getDistanceRight+0x14>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <getDistanceRight+0x28>

	//measure how long echo pin stays HIGH
	while (PINC & (1 << 5)) {
		durationRight++;
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	25 e0       	ldi	r18, 0x05	; 5
  da:	2a 95       	dec	r18
  dc:	f1 f7       	brne	.-4      	; 0xda <getDistanceRight+0x22>
  de:	00 00       	nop

	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 5)));

	//measure how long echo pin stays HIGH
	while (PINC & (1 << 5)) {
  e0:	35 99       	sbic	0x06, 5	; 6
  e2:	f9 cf       	rjmp	.-14     	; 0xd6 <getDistanceRight+0x1e>
		durationRight++;
		_delay_us(1);
	}
	//calculate distance in cm: duration / 58 (for 1탎 per round trip count at 340m/s (speed of sound) )
	return durationRight / 58;
  e4:	6a e3       	ldi	r22, 0x3A	; 58
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	0e 94 18 01 	call	0x230	; 0x230 <__divmodhi4>
  ec:	cb 01       	movw	r24, r22
}
  ee:	08 95       	ret

000000f0 <getDistanceFront>:

int getDistanceFront() {
	//duration variable
	int durationFront = 0;	
	//send 10 microsecond pulse to front sensor trigger
	PORTD |= (1 << 4);
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	25 e3       	ldi	r18, 0x35	; 53
  f8:	2a 95       	dec	r18
  fa:	f1 f7       	brne	.-4      	; 0xf8 <getDistanceFront+0x8>
  fc:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1 << 4);
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	8b b9       	out	0x0b, r24	; 11
	
	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 0)));
 104:	30 9b       	sbis	0x06, 0	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <getDistanceFront+0x14>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	05 c0       	rjmp	.+10     	; 0x118 <getDistanceFront+0x28>

	//while receiving pulse, count 
	while (PINC & (1 << 0)) {
		durationFront++;
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	25 e0       	ldi	r18, 0x05	; 5
 112:	2a 95       	dec	r18
 114:	f1 f7       	brne	.-4      	; 0x112 <getDistanceFront+0x22>
 116:	00 00       	nop
	
	//wait for echo pin to receive the pulse
	while (!(PINC & (1 << 0)));

	//while receiving pulse, count 
	while (PINC & (1 << 0)) {
 118:	30 99       	sbic	0x06, 0	; 6
 11a:	f9 cf       	rjmp	.-14     	; 0x10e <getDistanceFront+0x1e>
		durationFront++;
		_delay_us(1);
	}

	//calculate distance in cm: duration / 58 (for 1탎 per round trip count at 340m/s (speed of sound) )
	return durationFront / 58;
 11c:	6a e3       	ldi	r22, 0x3A	; 58
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 18 01 	call	0x230	; 0x230 <__divmodhi4>
 124:	cb 01       	movw	r24, r22
}
 126:	08 95       	ret

00000128 <main>:
	int front_distance = 0;
	int left_distance = 0;
	int right_distance = 0;
	
	//configure front sensor detection LED to port C pin 2
	DDRC |= 1<<2;
 128:	87 b1       	in	r24, 0x07	; 7
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	87 b9       	out	0x07, r24	; 7
	//left sensor detection LED port B pin 0
	DDRB |= 1<<0;
 12e:	84 b1       	in	r24, 0x04	; 4
 130:	81 60       	ori	r24, 0x01	; 1
 132:	84 b9       	out	0x04, r24	; 4
	//right sensor detection LED port B pin 5
	DDRC |= 1<<1;
 134:	87 b1       	in	r24, 0x07	; 7
 136:	82 60       	ori	r24, 0x02	; 2
 138:	87 b9       	out	0x07, r24	; 7
	
	//front ultrasonic sensor initialization
	//trigger pin: PORTD PIN0
	//echo pin: PORTD PIN1
	DDRD |= (1 << 4); //set trigger pin as output
 13a:	8a b1       	in	r24, 0x0a	; 10
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1 << 0); //set echo pin as input
 140:	87 b1       	in	r24, 0x07	; 7
 142:	8e 7f       	andi	r24, 0xFE	; 254
 144:	87 b9       	out	0x07, r24	; 7
	
	//left ultrasonic sensor
	//trigger pin: PORT D PIN 2
	//echo pin: PORTD PIN 7
	DDRD |= (1 << 2); //set trigger pin as output
 146:	8a b1       	in	r24, 0x0a	; 10
 148:	84 60       	ori	r24, 0x04	; 4
 14a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 7); //set echo pin as input
 14c:	8a b1       	in	r24, 0x0a	; 10
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	8a b9       	out	0x0a, r24	; 10

	//right ultrasonic sensor
	//trigger pin: PORTB PIN1
	//echo pin: PORTB PIN2
	DDRB |= (1 << 1); //set trigger pin as output
 152:	84 b1       	in	r24, 0x04	; 4
 154:	82 60       	ori	r24, 0x02	; 2
 156:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1 << 5); //set echo pin as input
 158:	87 b1       	in	r24, 0x07	; 7
 15a:	8f 7d       	andi	r24, 0xDF	; 223
 15c:	87 b9       	out	0x07, r24	; 7

	//Front Right Wheel
	DDRB |= (1<<3);
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	88 60       	ori	r24, 0x08	; 8
 162:	84 b9       	out	0x04, r24	; 4
	//Back Right Wheel
	DDRD |= (1<<3);
 164:	8a b1       	in	r24, 0x0a	; 10
 166:	88 60       	ori	r24, 0x08	; 8
 168:	8a b9       	out	0x0a, r24	; 10
	//Front Left Wheel
	DDRD |= (1<<6);
 16a:	8a b1       	in	r24, 0x0a	; 10
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	8a b9       	out	0x0a, r24	; 10
	//Back Left Wheel
	DDRD |= (1<<5);
 170:	8a b1       	in	r24, 0x0a	; 10
 172:	80 62       	ori	r24, 0x20	; 32
 174:	8a b9       	out	0x0a, r24	; 10

	while (1) {
		//at each instance of while loop, find the current distance to any object from the 3 sensors
		front_distance = getDistanceFront();
 176:	0e 94 78 00 	call	0xf0	; 0xf0 <getDistanceFront>
 17a:	8c 01       	movw	r16, r24
		left_distance = getDistanceLeft();
 17c:	0e 94 40 00 	call	0x80	; 0x80 <getDistanceLeft>
 180:	ec 01       	movw	r28, r24
		right_distance = getDistanceRight();
 182:	0e 94 5c 00 	call	0xb8	; 0xb8 <getDistanceRight>
		
		// if statement to check if the front distance is X centimeters away or less
		if (front_distance > 0 && front_distance <= 5) {
 186:	01 50       	subi	r16, 0x01	; 1
 188:	11 09       	sbc	r17, r1
 18a:	05 30       	cpi	r16, 0x05	; 5
 18c:	11 05       	cpc	r17, r1
 18e:	80 f4       	brcc	.+32     	; 0x1b0 <main+0x88>
			//then stop car and turn on front detection LED accordingly
			PORTD &= ~(1<<3);
 190:	2b b1       	in	r18, 0x0b	; 11
 192:	27 7f       	andi	r18, 0xF7	; 247
 194:	2b b9       	out	0x0b, r18	; 11
			PORTD &= ~(1<<6);
 196:	2b b1       	in	r18, 0x0b	; 11
 198:	2f 7b       	andi	r18, 0xBF	; 191
 19a:	2b b9       	out	0x0b, r18	; 11
			PORTD &= ~(1<<5);
 19c:	2b b1       	in	r18, 0x0b	; 11
 19e:	2f 7d       	andi	r18, 0xDF	; 223
 1a0:	2b b9       	out	0x0b, r18	; 11
			PORTB &= ~(1<<3);
 1a2:	25 b1       	in	r18, 0x05	; 5
 1a4:	27 7f       	andi	r18, 0xF7	; 247
 1a6:	25 b9       	out	0x05, r18	; 5
			PORTC |= 1<<2;
 1a8:	28 b1       	in	r18, 0x08	; 8
 1aa:	24 60       	ori	r18, 0x04	; 4
 1ac:	28 b9       	out	0x08, r18	; 8
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <main+0xa6>
		}
		else {
			//else, run like normal, and turn off front detection LED
			PORTD |= (1<<3);
 1b0:	2b b1       	in	r18, 0x0b	; 11
 1b2:	28 60       	ori	r18, 0x08	; 8
 1b4:	2b b9       	out	0x0b, r18	; 11
			PORTD |= (1<<6);
 1b6:	2b b1       	in	r18, 0x0b	; 11
 1b8:	20 64       	ori	r18, 0x40	; 64
 1ba:	2b b9       	out	0x0b, r18	; 11
			PORTD |= (1<<5);
 1bc:	2b b1       	in	r18, 0x0b	; 11
 1be:	20 62       	ori	r18, 0x20	; 32
 1c0:	2b b9       	out	0x0b, r18	; 11
			PORTB |= (1<<3);
 1c2:	25 b1       	in	r18, 0x05	; 5
 1c4:	28 60       	ori	r18, 0x08	; 8
 1c6:	25 b9       	out	0x05, r18	; 5
			PORTC &= ~(1<<2);
 1c8:	28 b1       	in	r18, 0x08	; 8
 1ca:	2b 7f       	andi	r18, 0xFB	; 251
 1cc:	28 b9       	out	0x08, r18	; 8
		}
		
		
		// if statement to check if the left distance is X centimeters away or less
		if (left_distance > 0 && left_distance <= 5) {
 1ce:	21 97       	sbiw	r28, 0x01	; 1
 1d0:	25 97       	sbiw	r28, 0x05	; 5
 1d2:	20 f4       	brcc	.+8      	; 0x1dc <main+0xb4>
			//turn on left detection LED accordingly
			PORTB |= 1<<0;
 1d4:	25 b1       	in	r18, 0x05	; 5
 1d6:	21 60       	ori	r18, 0x01	; 1
 1d8:	25 b9       	out	0x05, r18	; 5
 1da:	0f c0       	rjmp	.+30     	; 0x1fa <main+0xd2>
			}
		else {
			//else, run like normal, and turn off left detection LEDs
			PORTD |= (1<<3);
 1dc:	2b b1       	in	r18, 0x0b	; 11
 1de:	28 60       	ori	r18, 0x08	; 8
 1e0:	2b b9       	out	0x0b, r18	; 11
			PORTD |= (1<<6);
 1e2:	2b b1       	in	r18, 0x0b	; 11
 1e4:	20 64       	ori	r18, 0x40	; 64
 1e6:	2b b9       	out	0x0b, r18	; 11
			PORTD |= (1<<5);
 1e8:	2b b1       	in	r18, 0x0b	; 11
 1ea:	20 62       	ori	r18, 0x20	; 32
 1ec:	2b b9       	out	0x0b, r18	; 11
			PORTB |= (1<<3);
 1ee:	25 b1       	in	r18, 0x05	; 5
 1f0:	28 60       	ori	r18, 0x08	; 8
 1f2:	25 b9       	out	0x05, r18	; 5
			PORTB &= ~(1<<0);
 1f4:	25 b1       	in	r18, 0x05	; 5
 1f6:	2e 7f       	andi	r18, 0xFE	; 254
 1f8:	25 b9       	out	0x05, r18	; 5
				}
				
				
		// if statement to check if the right distance is X centimeters away or less
		if (right_distance > 0 && right_distance <= 5) {
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	05 97       	sbiw	r24, 0x05	; 5
 1fe:	20 f4       	brcc	.+8      	; 0x208 <main+0xe0>
			//turn on right detection LED accordingly
			PORTC |= 1<<1;
 200:	88 b1       	in	r24, 0x08	; 8
 202:	82 60       	ori	r24, 0x02	; 2
 204:	88 b9       	out	0x08, r24	; 8
 206:	0f c0       	rjmp	.+30     	; 0x226 <main+0xfe>
				}
		
		else {
			//else, run like normal, and turn off right detection LED
			PORTD |= (1<<3);
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	88 60       	ori	r24, 0x08	; 8
 20c:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1<<6);
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	80 64       	ori	r24, 0x40	; 64
 212:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1<<5);
 214:	8b b1       	in	r24, 0x0b	; 11
 216:	80 62       	ori	r24, 0x20	; 32
 218:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (1<<3);
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	88 60       	ori	r24, 0x08	; 8
 21e:	85 b9       	out	0x05, r24	; 5
			PORTC &= ~(1<<1);
 220:	88 b1       	in	r24, 0x08	; 8
 222:	8d 7f       	andi	r24, 0xFD	; 253
 224:	88 b9       	out	0x08, r24	; 8
 226:	85 e3       	ldi	r24, 0x35	; 53
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x100>
 22c:	00 00       	nop
 22e:	a3 cf       	rjmp	.-186    	; 0x176 <main+0x4e>

00000230 <__divmodhi4>:
 230:	97 fb       	bst	r25, 7
 232:	07 2e       	mov	r0, r23
 234:	16 f4       	brtc	.+4      	; 0x23a <__divmodhi4+0xa>
 236:	00 94       	com	r0
 238:	07 d0       	rcall	.+14     	; 0x248 <__divmodhi4_neg1>
 23a:	77 fd       	sbrc	r23, 7
 23c:	09 d0       	rcall	.+18     	; 0x250 <__divmodhi4_neg2>
 23e:	0e 94 2c 01 	call	0x258	; 0x258 <__udivmodhi4>
 242:	07 fc       	sbrc	r0, 7
 244:	05 d0       	rcall	.+10     	; 0x250 <__divmodhi4_neg2>
 246:	3e f4       	brtc	.+14     	; 0x256 <__divmodhi4_exit>

00000248 <__divmodhi4_neg1>:
 248:	90 95       	com	r25
 24a:	81 95       	neg	r24
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	08 95       	ret

00000250 <__divmodhi4_neg2>:
 250:	70 95       	com	r23
 252:	61 95       	neg	r22
 254:	7f 4f       	sbci	r23, 0xFF	; 255

00000256 <__divmodhi4_exit>:
 256:	08 95       	ret

00000258 <__udivmodhi4>:
 258:	aa 1b       	sub	r26, r26
 25a:	bb 1b       	sub	r27, r27
 25c:	51 e1       	ldi	r21, 0x11	; 17
 25e:	07 c0       	rjmp	.+14     	; 0x26e <__udivmodhi4_ep>

00000260 <__udivmodhi4_loop>:
 260:	aa 1f       	adc	r26, r26
 262:	bb 1f       	adc	r27, r27
 264:	a6 17       	cp	r26, r22
 266:	b7 07       	cpc	r27, r23
 268:	10 f0       	brcs	.+4      	; 0x26e <__udivmodhi4_ep>
 26a:	a6 1b       	sub	r26, r22
 26c:	b7 0b       	sbc	r27, r23

0000026e <__udivmodhi4_ep>:
 26e:	88 1f       	adc	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	5a 95       	dec	r21
 274:	a9 f7       	brne	.-22     	; 0x260 <__udivmodhi4_loop>
 276:	80 95       	com	r24
 278:	90 95       	com	r25
 27a:	bc 01       	movw	r22, r24
 27c:	cd 01       	movw	r24, r26
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
